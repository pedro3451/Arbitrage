import numpy as np


def vw1(i):
    x, y, z = i
    return 1.63 * x + 0 * y + 0 * z


def vw2(i):
    x, y, z = i
    return 0 * x + 4 * y + 0 * z


def vw3(i):
    x, y, z = i
    return 1 * x + 0 * y + 5.6 * z


def combinatie(T):
    x = np.linspace(0, T, T + 1)
    y = np.linspace(0, T, T + 1)
    lijst = []
    for i in range(T + 1):
        x1 = x[i]
        for i in range(T + 1):
            y1 = y[i]
            if x1 + y1 > T:
                continue
            else:
                lijst.append((x1, y1, T - x1 - y1))
    return lijst


def bet(T=100):
    lijst = combinatie(T)
    lijst2 = []
    lijstw = []
    for i in lijst:
        if vw1(i) >= T and vw2(i) >= T and vw3(i) >= T:
            lijst2.append(i)
            lijstw.append([vw1(i), vw2(i), vw3(i)])

    eenkeer = True
    closest_to_equal = None
    min_std_dev = float('inf')
    for i in range(len(lijstw)):
        temp = np.array(lijstw[i])
        if eenkeer:
            min_value = temp.min()
            max_value = temp.max()
            min_lijst = lijst2[i]
            min_waarde = lijstw[i]
            max_lijst = lijst2[i]
            max_waarde = lijstw[i]
            eenkeer = False
        if temp.min() < min_value:
            min_value = temp.min()
            min_lijst = lijst2[i]
            min_waarde = lijstw[i]
        if temp.max() > max_value:
            max_value = temp.max()
            max_lijst = lijst2[i]
            max_waarde = lijstw[i]

        # Calculate the standard deviation to find the combination where values are closest to each other
        std_dev = np.std(temp)
        if std_dev < min_std_dev:
            min_std_dev = std_dev
            closest_to_equal = (lijst2[i], lijstw[i])

    print(
        f"Voor maximum heeft men: {max_value} voor de (x, y, z) = {max_lijst} en de waarde (vw1, vw2, vw3) = {max_waarde}")
    print("")
    print(
        f"Voor minimum heeft men: {min_value} voor de (x, y, z) = {min_lijst} en de waarde (vw1, vw2, vw3) = {min_waarde}")
    print("")
    print(
        f"Voor beste verdeling: (x, y, z) = {closest_to_equal[0]} en de waarde (vw1, vw2, vw3) = {closest_to_equal[1]}")


bet(100)
